# -*- coding: utf-8 -*-
"""
Gestionnaire de device Android r√©el avec MID Instagram
Extraction compl√®te des informations du device via Termux/Android
"""

import os
import json
import time
import hashlib
import hmac
import base64
import uuid
import random
import subprocess
import requests
import re
from .encryption import InstagramEncryption
from .license import validate_license

def detect_termux_environment():
    """D√©tecter si on est dans Termux pour adapter les headers"""
    try:
        if os.environ.get('TERMUX_VERSION') or os.environ.get('PREFIX', '').startswith('/data/data/com.termux'):
            return True
        
        try:
            result = subprocess.run(['termux-info'], capture_output=True, timeout=3)
            if result.returncode == 0:
                return True
        except:
            pass
        
        if os.path.exists('/data/data/com.termux/files/usr'):
            return True
            
        return False
    except:
        return False

def get_optimal_encoding_for_environment():
    """Retourner l'encodage optimal selon l'environnement"""
    if detect_termux_environment():
        print("üîß Environnement Termux d√©tect√© - Optimisation des headers")
        return "gzip, deflate"
    else:
        return "gzip, deflate, zstd"

class DeviceManager:
    """Gestionnaire des informations du device Android r√©el avec MID Instagram r√©cup√©ration am√©lior√©e"""
    
    def __init__(self):
        # Validation licence obligatoire
        if not validate_license():
            raise PermissionError("Ce script n'est pas autoris√© √† utiliser cette biblioth√®que. Veuillez contacter le cr√©ateur via: 0389561802 ou https://t.me/Kenny5626")
        
        self.device_file = "ig_device.json"
        self.device_info = {}
        self.load_or_create_device_info()
    
    def get_real_android_device_info(self):
        """R√©cup√©rer les vraies informations du device Android depuis Termux"""
        device_info = {}
        
        try:
            # Android ID - Le plus important
            try:
                android_id = subprocess.run(['settings', 'get', 'secure', 'android_id'], 
                                          capture_output=True, text=True, timeout=5).stdout.strip()
                if android_id and android_id != 'null':
                    device_info['android_id'] = f"android-{android_id}"
            except:
                device_info['android_id'] = f"android-{hashlib.md5(str(time.time()).encode()).hexdigest()[:16]}"
            
            # Device UUID bas√© sur Android ID
            device_info['device_uuid'] = str(uuid.uuid5(uuid.NAMESPACE_DNS, device_info['android_id']))
            
            # Propri√©t√©s du build Android
            build_props = {
                'model': 'ro.product.model',
                'brand': 'ro.product.brand', 
                'manufacturer': 'ro.product.manufacturer',
                'device': 'ro.product.device',
                'android_version': 'ro.build.version.release',
                'sdk_version': 'ro.build.version.sdk',
                'build_id': 'ro.build.id',
                'fingerprint': 'ro.build.fingerprint'
            }
            
            for key, prop in build_props.items():
                try:
                    value = subprocess.run(['getprop', prop], capture_output=True, text=True, timeout=3).stdout.strip()
                    if value:
                        device_info[key] = value
                except:
                    pass
            
            # √âcran et densit√©
            try:
                wm_size = subprocess.run(['wm', 'size'], capture_output=True, text=True, timeout=3).stdout
                if 'Physical size:' in wm_size:
                    import re
                    size_match = re.search(r'(\d+)x(\d+)', wm_size)
                    if size_match:
                        device_info['screen_width'] = int(size_match.group(1))
                        device_info['screen_height'] = int(size_match.group(2))
            except:
                pass
            
            try:
                wm_density = subprocess.run(['wm', 'density'], capture_output=True, text=True, timeout=3).stdout
                if 'Physical density:' in wm_density:
                    import re
                    density_match = re.search(r'(\d+)', wm_density)
                    if density_match:
                        device_info['screen_density'] = int(density_match.group(1))
            except:
                pass
                
            # Informations r√©seau
            try:
                result = subprocess.run(['ip', 'route'], capture_output=True, text=True, timeout=3)
                if result.returncode == 0 and 'wlan' in result.stdout:
                    device_info['connection_type'] = 'WIFI'
                else:
                    device_info['connection_type'] = 'MOBILE'
            except:
                device_info['connection_type'] = 'WIFI'
            
        except Exception as e:
            pass
        
        # Fallbacks r√©alistes si r√©cup√©ration √©choue
        fallbacks = {
            'model': 'SM-G991B',
            'brand': 'samsung', 
            'manufacturer': 'samsung',
            'device': 'z3q',
            'android_version': '12',
            'sdk_version': '32',
            'build_id': 'SP1A.210812.016',
            'screen_width': 900,
            'screen_height': 1600,
            'screen_density': 320,
            'connection_type': 'WIFI'
        }
        
        for key, default in fallbacks.items():
            if key not in device_info:
                device_info[key] = default
        
        # G√©n√©rer family_device_id stable
        device_info['family_device_id'] = str(uuid.uuid5(uuid.NAMESPACE_DNS, 
                                                        f"{device_info.get('android_id', '')}-family"))
        
        # User-Agent Instagram r√©aliste
        device_info['user_agent'] = (
            f"Instagram 394.0.0.46.81 Android "
            f"({device_info['sdk_version']}/{device_info['android_version']}; "
            f"{device_info['screen_density']}dpi; "
            f"{device_info['screen_width']}x{device_info['screen_height']}; "
            f"{device_info['manufacturer']}; {device_info['model']}; "
            f"{device_info['device']}; exynos8895; fr_FR; 779659870)"
        )
        
        return device_info
    
    def get_instagram_mid_from_web(self, device_info: dict) -> str:
        """R√©cup√©rer MID Instagram depuis le web avec m√©thodes am√©lior√©es"""
        # Session temporaire pour r√©cup√©rer le MID
        import requests
        temp_session = requests.Session()
        
        # √âtape 1: Essayer avec l'endpoint direct des donn√©es partag√©es
        try:
            
            shared_headers = {
                "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                "accept-encoding": "gzip, deflate",
                "accept-language": "fr-FR,fr;q=0.9,en;q=0.8",
                "user-agent": f"Mozilla/5.0 (Linux; Android {device_info['android_version']}; {device_info['model']}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
                "cache-control": "no-cache"
            }
            
            response = temp_session.get(
                "https://www.instagram.com/data/shared_data/",
                headers=shared_headers,
                timeout=15,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                
                # Utiliser le d√©codage unifi√©
                content = InstagramEncryption.safe_decode_response(response)
                
                # Chercher MID dans les donn√©es JSON
                try:
                    data = json.loads(content)
                    
                    # Chercher dans diff√©rents emplacements possibles
                    mid_locations = [
                        data.get("machine_id"),
                        data.get("mid"),
                        data.get("config", {}).get("machine_id"),
                        data.get("config", {}).get("mid"),
                        data.get("rollout_hash")
                    ]
                    
                    for mid_candidate in mid_locations:
                        if mid_candidate and len(str(mid_candidate)) > 15:
                            return str(mid_candidate)
                            
                except json.JSONDecodeError:
                    # Si ce n'est pas du JSON, chercher avec regex
                    pass
                
                # Patterns regex pour MID dans shared_data
                mid_patterns = [
                    r'"machine_id"\s*:\s*"([A-Za-z0-9+/=_-]{20,})"',
                    r'"mid"\s*:\s*"([A-Za-z0-9+/=_-]{20,})"',
                    r'"rollout_hash"\s*:\s*"([A-Za-z0-9+/=_-]{20,})"',
                    r'machine_id["\s]*:["\s]*([A-Za-z0-9+/=_-]{20,})'
                ]
                
                for pattern in mid_patterns:
                    matches = re.findall(pattern, content)
                    if matches:
                        mid_candidate = matches[0].strip()
                        if len(mid_candidate) > 15:
                            return mid_candidate
        
        except Exception as e:
            print(f"‚ö†Ô∏è M√©thode 1 √©chou√©e: {e}")
        
        # √âtape 2: Page d'accueil Instagram avec cookies
        try:
            
            web_headers = {
                "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
                "accept-encoding": "gzip, deflate, br",
                "accept-language": "fr-FR,fr;q=0.9,en;q=0.8",
                "cache-control": "max-age=0",
                "dnt": "1",
                "sec-ch-ua": '"Not_A Brand";v="8", "Chromium";v="120", "Android WebView";v="120"',
                "sec-ch-ua-mobile": "?1",
                "sec-ch-ua-platform": '"Android"',
                "sec-fetch-dest": "document",
                "sec-fetch-mode": "navigate",
                "sec-fetch-site": "none",
                "sec-fetch-user": "?1",
                "upgrade-insecure-requests": "1",
                "user-agent": f"Mozilla/5.0 (Linux; Android {device_info['android_version']}; {device_info['model']}) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/120.0.6099.210 Mobile Safari/537.36",
                "viewport-width": str(device_info['screen_width'])
            }
            
            response = temp_session.get(
                "https://www.instagram.com/", 
                headers=web_headers,
                timeout=15,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                for cookie in response.cookies:
                    print(f"   {cookie.name}: {cookie.value[:50]}...")
                    if cookie.name == 'mid':
                        return cookie.value
                
                # Utiliser le d√©codage unifi√© pour le contenu
                content = InstagramEncryption.safe_decode_response(response)
                
                # Patterns regex plus complets pour le HTML
                mid_patterns = [
                    r'"mid":"([A-Za-z0-9+/=_-]{15,})"',
                    r'"machine_id":"([A-Za-z0-9+/=_-]{15,})"',
                    r'"deviceId":"([A-Za-z0-9+/=_-]{15,})"',
                    r'mid=([A-Za-z0-9+/=_-]{15,})[;&,]',
                    r'machine_id["\s]*:["\s]*([A-Za-z0-9+/=_-]{15,})',
                    r'window\._sharedData[^}]*"mid":"([^"]+)"',
                    r'{"mid":"([A-Za-z0-9+/=_-]{15,})"}',
                    r'"rollout_hash":"([A-Za-z0-9+/=_-]{15,})"'
                ]
                
                for i, pattern in enumerate(mid_patterns):
                    matches = re.findall(pattern, content)
                    if matches:
                        for match in matches:
                            mid_candidate = match.strip()
                            if len(mid_candidate) >= 15 and not mid_candidate.startswith('null'):
                                return mid_candidate
        
        except Exception as e:
            print(f"‚ö†Ô∏è M√©thode 2 √©chou√©e: {e}")
        
        # √âtape 3: Endpoint graphql avec session √©tablie
        try:
            print("üì° M√©thode 3: Endpoint GraphQL...")
            
            graphql_headers = {
                "accept": "*/*",
                "accept-encoding": "gzip, deflate, br",
                "accept-language": "fr-FR,fr;q=0.9,en;q=0.8",
                "content-type": "application/x-www-form-urlencoded",
                "origin": "https://www.instagram.com",
                "referer": "https://www.instagram.com/",
                "user-agent": web_headers["user-agent"],
                "x-asbd-id": "129477",
                "x-csrftoken": "missing",
                "x-ig-app-id": "936619743392459",
                "x-ig-www-claim": "0",
                "x-requested-with": "XMLHttpRequest"
            }
            
            # Essayer de faire une requ√™te GraphQL simple qui retourne des m√©tadonn√©es
            response = temp_session.get(
                "https://www.instagram.com/web/search/topsearch/?context=blended&query=&rank_token=&count=0",
                headers=graphql_headers,
                timeout=10
            )
            
            if response.status_code == 200:
                content = InstagramEncryption.safe_decode_response(response)
                
                # Chercher dans les headers de r√©ponse d'abord
                for header_name, header_value in response.headers.items():
                    if 'mid' in header_name.lower() or 'machine' in header_name.lower():
                        if len(header_value) > 15:
                            return header_value
                
                # Puis dans le JSON de r√©ponse
                try:
                    data = json.loads(content)
                    if isinstance(data, dict):
                        for key, value in data.items():
                            if ('mid' in key.lower() or 'machine' in key.lower()) and isinstance(value, str) and len(value) > 15:
                                return value
                except:
                    pass
                    
        except Exception as e:
            print(f"‚ö†Ô∏è M√©thode 3 √©chou√©e: {e}")
        
        try:
            # Utiliser des donn√©es r√©elles du device pour cr√©er un MID coh√©rent
            device_string = f"{device_info['android_id']}{device_info['device_uuid']}{int(time.time())}"
            device_hash = hashlib.sha256(device_string.encode()).hexdigest()
            
            # Encoder en base64 pour ressembler √† un vrai MID Instagram
            mid_bytes = device_hash[:32].encode()
            mid_b64 = base64.b64encode(mid_bytes).decode().rstrip('=')
            
            # Ajouter pr√©fixe r√©aliste
            realistic_mid = f"aK{mid_b64}AABAABAAGr1cGeLxBgxSR2V-Nk"[:30]
            return realistic_mid
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur g√©n√©ration MID: {e}")
        
        # Fallback ultime
        fallback_mid = f"aK{hashlib.md5(str(time.time()).encode()).hexdigest()[:20]}AABAA"
        return fallback_mid
    
    def load_or_create_device_info(self):
        """Charger ou cr√©er les infos device avec MID r√©el"""
        if os.path.exists(self.device_file):
            try:
                with open(self.device_file, 'r', encoding='utf-8') as f:
                    loaded_info = json.load(f)
                
                # V√©rifier si le MID existe et n'est pas le d√©faut statique
                current_mid = loaded_info.get('x_mid', '')
                if current_mid and len(current_mid) > 15 and not current_mid.startswith('aKqYqAABAAG'):
                    self.device_info = loaded_info
                    return
                else:
                    print("‚ö†Ô∏è MID invalide ou statique d√©tect√©, r√©g√©n√©ration...")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur chargement device: {e}")
        
        # Cr√©er nouvelles infos device avec MID r√©el
        print("üîÑ Cr√©ation des informations device...")
        device_info = self.get_real_android_device_info()
        
        # R√©cup√©rer le MID r√©el depuis Instagram avec m√©thode am√©lior√©e
        real_mid = self.get_instagram_mid_from_web(device_info)
        device_info['x_mid'] = real_mid
        
        self.device_info = device_info
        self.save_device_info()
        print(f"‚úÖ Device info avec MID r√©el cr√©√©: {real_mid[:20]}...")
    
    def save_device_info(self):
        """Sauvegarder les infos device"""
        try:
            with open(self.device_file, 'w', encoding='utf-8') as f:
                json.dump(self.device_info, f, indent=2, ensure_ascii=False)
            print(f"üíæ Device info sauvegard√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde device: {e}")
    
    def get_x_mid(self) -> str:
        """R√©cup√©rer le x-mid pour les headers"""
        mid = self.device_info.get('x_mid', '')
        if mid and len(mid) > 15:
            return mid
        
        # Si pas de MID valide, en r√©cup√©rer un nouveau
        print("üîÑ R√©cup√©ration nouveau MID...")
        new_mid = self.get_instagram_mid_from_web(self.device_info)
        self.device_info['x_mid'] = new_mid
        self.save_device_info()
        return new_mid
    
    def refresh_mid_if_needed(self):
        """Rafra√Æchir le MID si n√©cessaire (apr√®s erreurs Instagram)"""
        try:
            current_mid = self.device_info.get('x_mid', '')
            
            # Si le MID est invalide, statique ou trop court
            if not current_mid or len(current_mid) < 15 or current_mid.startswith('aKqYqAABAAG') or current_mid.startswith('aKsWZwABAAG'):
                print("üîÑ Rafra√Æchissement du MID n√©cessaire...")
                new_mid = self.get_instagram_mid_from_web(self.device_info)
                self.device_info['x_mid'] = new_mid
                self.save_device_info()
                print(f"‚úÖ Nouveau MID: {new_mid[:20]}...")
                return new_mid
            
            print(f"‚úÖ MID actuel valide: {current_mid[:20]}...")
            return current_mid
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur rafra√Æchissement MID: {e}")
            return self.device_info.get('x_mid', 'fallback_mid')
